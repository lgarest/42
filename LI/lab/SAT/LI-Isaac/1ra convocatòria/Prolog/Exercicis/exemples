padre(juan,pedro).
padre(maria,pedro).
hermano(pedro,vicente).
hermano(pedro,alberto).

-------------

Quan volem que resolgui acabem amb .
majúscules són variables
minúscules són constants
= és per unificar
== és per demanar si és igual
\= és per demanar si no unifica
VARIABLE is expressió(sense variables) --> evalua
VARIABLE = núm, VARIABLE2 is expressió(es pot usar VARIABLE) --> evalua
VARIABLE = [1,2,3,4,...] --> llista
VAR = [1,[2,5],[],8]
V = [[]] --> cardinalitat 1
V = [] --> cardinalitat 0
[1,2,3] == [1|[2,3]]. --> yes
Quan hi ha la barra aquesta --> el primer és un element o varis separats per comes i el segon una llista
[[1]|[2,3] == [[1],2,3] --> yes
[1,3|[]] == [1,3] --> yes


------
Exercici petit

%donada una llista d'elements L, calcula la seva longitud N
%longitud(L,N)

longitud([],0).  //cas base
longitud ([X|L],N):- longitud(L,N1), N is N1+1.   //cas recursiu

Donaria un warning. Quan una variable només apareix una vegada (no ens importa el valor) es posa _

longitud([],0).
longitud ([_|L],N):- longitud(L,N1), N is N1+1.


------
Exercici petit 2

%donada una llista d'enters L, calcula la seva suma S
%suma(L,S)

suma([],0).
suma([X|L],S):- suma(L,S1), S is S1+X.


--------
Exercici petit 3
%donada una llista L, sota backtrack retorna tots els seus elements X
%pertany(X,L)

pertany(X,[X,L]).  //X pertany a la llista si és el primer o
pertany(X,[_|L]):- pertany(X,L).  //si X pertany a la cua


---------
Exercici interessant
%L3 és la concatenació de les llistes L1 i L2
%concat(L1,L2,L3)

concat([],L,L).
concat([X|L1],L2,[X|L3]):- concat(L1,L2,L3).  //ja sabem que L3 comença amb X


---------
Exercici interessant 2
%donada una llista L, sota backtrack retorna tots els seus elements X, i R és
%la llista L sense l'element X
%pert_con_resto(X,L,R)

pert_con_resto(X,[X|L],L).
pert_con_resto(X,[Y|L]:- pert_con_resto(X,L,R1), R=[Y|R1].

MÉS NET

pert_con_resto(X,[X|L],L).
pert_con_resto(X,L,R):- concat(L1,[X|L2],L), concat(L1,L2,R).


----------
Exercici interessant 3
%donada una llista L, calcula sota backtrack tots els seus subconjunts S
%subcoonjunt(L,S)

subconjunt([],[]).
subconjunt([X|L],[X|S]):- subconjunt(L,S).  //els que contenen X i
subconjunt([_|L],S):- subconjunt(L,S). 	    //els que no
