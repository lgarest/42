
varying vec3 Vobs, Nobs;
void main () {
	gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
	Vobs = vec3 ( gl_ModelViewMatrix * gl_Vertex);
	Nobs = gl_NormalMatrix * gl_Normal;
    vec3 L = gl_LightSource[0].position.xyz - Vobs; // L 
	L = normalize(L);
	vec3 ambient = gl_LightSource[0].ambient.rgb;
	vec3 diffuse = gl_LightSource[0].diffuse.rgb;
	vec3 specular = gl_LightSource[0].specular.rgb;
	vec3 ambientmaterial = gl_FrontMaterial.ambient.rgb;
	vec3 diffusematerial = gl_FrontMaterial.diffuse.rgb;
	vec3 specularmaterial = gl_FrontMaterial.specular.rgb;
	
	vec4 mambient;
	mambient.r = (gl_LightModel.ambient.r + ambient.r)*ambientmaterial.r;
	mambient.g = (gl_LightModel.ambient.g + ambient.g)*ambientmaterial.g;
	mambient.b = (gl_LightModel.ambient.b + ambient.b)*ambientmaterial.b;
	float NL = max(0.0,dot(Nobs, L));
    
	vec4  mdiffuse;
	mdiffuse.r = diffuse.r*diffusematerial.r;
	mdiffuse.g = diffuse.g*diffusematerial.g;
	mdiffuse.b = diffuse.b*diffusematerial.b;
	vec4 difussetotal = mdiffuse*NL;

    Vobs = normalize(Vobs);
	vec3 H = L;//+Vobs;
	H.z = H.z + 1;
	H = normalize(H);
	float escalar = max(0.0,dot(Nobs, H));
	
	float s = gl_FrontMaterial.shininess;
	float escalars = pow(escalar,s);
	
	vec4 speculartot;
	speculartot.r = specular.r * specularmaterial.r * escalars;
	speculartot.g = specular.g * specularmaterial.g * escalars;
	speculartot.b = specular.b * specularmaterial.b * escalars;
	gl_FrontColor = mambient+difussetotal+speculartot;
}
